#=
 = create-lar-pplus-chanwise-macros.jl
 =
 = Author:  Katharina von Sturm - vonsturm@pd.infn.it
 = Created: 08 Jan 2018
 =
 =#
import JSON

# check if everything is ok
isfile("./create-lar-pplus-chanwise-macros.jl") || error("Please run this script from where create-lar-pplus-chanwise-macros.jl is!")

length(ARGS) < 1 && error("USAGE: julia create-lar-pplus-chanwise-macros.jl ISOTOPE")

for f in ["../../gedet/lar_pplus_chanwise/$(ARGS[1])/edep/log/raw-gedet-lar_pplus_chanwise-$(ARGS[1])-edep-%DET.tmac",
          "../det-data/ged-mapping.json",
          "../det-data/ged-parameters.json"
         ]
    isfile(f) || error("$f not found!")
end

# get dictionaries for gedet
gedMap = JSON.parsefile("../det-data/ged-mapping.json")["mapping"]
gedPar = JSON.parsefile("../det-data/ged-parameters.json")
# get template macro file
temLines = readlines(open("../../gedet/lar_pplus_chanwise/$(ARGS[1])/edep/log/raw-gedet-lar_pplus_chanwise-$(ARGS[1])-edep-%DET.tmac"))

DISKHEIGHT = 5
TOTVOLUME = 0

# loop over detectors in ged-mapping file with a (key,value) pair
for (det, info) in gedMap

    if contains( det, "GD" )
        VOL = DISKHEIGHT * gedPar[det]["groove_inner_radius"] * gedPar[det]["groove_inner_radius"] * pi
    elseif contains( det, "ANG" ) || contains( det, "RG" ) || contains( det, "GTF" )
        VOL = gedPar[det]["pplus_length_z"] * gedPar[det]["pplus_radius"] * gedPar[det]["pplus_radius"] * pi
        VOL += DISKHEIGHT * gedPar[det]["groove_inner_radius"] * gedPar[det]["groove_inner_radius"] * pi
    end

    TOTVOLUME += VOL
end

# loop over detectors in ged-mapping file with a (key,value) pair
for (det, info) in gedMap
    CHANNEL = info["channel"]
    INNERRADIUS = "0 mm"
    OUTERRADIUS = string(gedPar[det]["groove_inner_radius"]) * " mm"
    XPOS = string(gedPar[det]["detcenter_x"]) * " mm"
    YPOS = string(gedPar[det]["detcenter_y"]) * " mm"

    if contains( det, "GD" )
        HEIGHT = string(DISKHEIGHT) * " mm"
        ZPOS = string(gedPar[det]["detcenter_z"] - gedPar[det]["height"]/2.0 - 2.5) * " mm"
        VOLUME = 5 * gedPar[det]["groove_inner_radius"] * gedPar[det]["groove_inner_radius"] * pi
    elseif contains( det, "ANG" ) || contains( det, "RG" ) || contains( det, "GTF" )
        HEIGHT = string(gedPar[det]["pplus_length_z"] + DISKHEIGHT) * " mm"
        ZPOS = string(gedPar[det]["detcenter_z"] - gedPar[det]["height"]/2.0 - 2.5 + gedPar[det]["pplus_length_z"]/2.0) * " mm"
        VOLUME = gedPar[det]["pplus_length_z"] * gedPar[det]["pplus_radius"] * gedPar[det]["pplus_radius"] * pi
        VOLUME += 5 * gedPar[det]["groove_inner_radius"] * gedPar[det]["groove_inner_radius"] * pi 
    end

        PRIMARIES = string( convert(Int64,round( ( 1E08 * VOLUME / TOTVOLUME ) )) );

        macLines = temLines
        macLines = replace.(macLines, "\$CHANNEL", CHANNEL)
        macLines = replace.(macLines, "\$INNERRADIUS", INNERRADIUS)
        macLines = replace.(macLines, "\$OUTERRADIUS", OUTERRADIUS)
        macLines = replace.(macLines, "\$HEIGHT", HEIGHT)
        macLines = replace.(macLines, "\$XPOS", XPOS)
        macLines = replace.(macLines, "\$YPOS", YPOS)
        macLines = replace.(macLines, "\$ZPOS", ZPOS)
        macLines = replace.(macLines, "\$PRIMARIES", PRIMARIES)

    unshift!(macLines, "")
    unshift!(macLines, "#This macro was auto-generated by the create-lar-pplus-macros.jl script")

    writedlm(open("../../gedet/lar_pplus_chanwise/$(ARGS[1])/edep/log/raw-gedet-lar_pplus_chanwise-$(ARGS[1])-edep-ch$CHANNEL.mac", "w"), macLines, '\n')
    println("created ../../gedet/lar_pplus_chanwise/$(ARGS[1])/edep/log/raw-gedet-lar_pplus_chanwise-$(ARGS[1])-edep-ch$CHANNEL.mac")
end
